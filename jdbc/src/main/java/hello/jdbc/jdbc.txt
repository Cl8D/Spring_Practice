- JDBC
: 클라이언트가 애플리케이션 서버를 통해 데이터 저장 및 조회를 할 때,

서버는 일반적으로 다음과 같은 프로세스를 진행한다.
1. TCP/IP를 사용하여 커넥션 연결
2. 애플리케이션 서버는 DB가 이해할 수 있는 SQL을 연결된 커넥션을 통해 DB에 전달
3. DB는 전달된 SQL 수행 및 결과 응답 + 서버는 응답 결과를 활용

- DB마다 다 방법이 다르니까 이를 통합하기 위해 JDBC라는 자바 표준이 등장하였다.


=======

- JDBC 표준 인터페이스
: 자바에서 DB에 접속할 수 있도록 하는 자바 API.
JDBC는 DB의 자료 쿼리 및 업데이트 방법을 제공한다.

1) 연결 - java.sql.Connection
2) SQL 담은 내용 - java.sql.Statement
3) SQL 요청 응답 - java.sql.ResultSet

- 각각의 DB는 JDBC 드라이버를 제공하여 각각의 DB에 접근할 수 있도록 한다.
(왜냐면 JDBC는 인터페이스니까, 각각을 DB에 맞춰서 구현을 해야 함)

--> 결국 개발자는 JDBC 표준 인터페이스에 맞춰서 개발을 하면 된다.
각각의 DB에 맞춰서 드라이버를 꽂아서 사용하기만 하면 되기 때문!


==============

- JDBC를 사용하는 기술 : 대표적으로 SQL Mapper / ORM 기술
SQL Mapper (JdbcTemplate / MyBatis)
: SQL 응답 결과를 객체로 변결하거나, JDBC의 반복 코드를 제거해준다.
: 그러나, SQL문 자체는 직접 작성해야 한다.

ORM 기술 (Hibernate / EclipseLink / JPA)
: 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술
: 개발자가 직접 SQL을 작성할 필요 없다는 장점이 있다.


==================

- JDBC DriverManager 연결 이해
- JDBC는 java.sql.Connection이라는 표준 커넥션 인터페이스를 정의하고,
H2는 이러한 jdbc 커넥션 인터페이스의 구현체를 제공하게 된다.

- DriverManager Connection 요청 흐름
: drivermanager는 라이브러리에 등록된 db 드라이버 관리 및 커넥션 획득 기능을 제공한다.

1) 애플리케이션 로직에서 커넥션 필요 > DriverManager.getConnection() 호출
2) DriverManager는 등록된 드라이버 목록 인식 후, 커넥션 획득 가능 여부 확인
이때 URL 정보(여기에 db에 관한 직접적인 정보가 제공된다고 볼 수 있음), 접속에 필요한 정보 등을 함께 넘겨준다.
ex- URL) jdbc:h2:tcp://localhost/~...
3) 각각의 드라이버는 본인이 처리 가능한 요청인지 확인한다.
4) 찾아진 커넥션 구현체가 클라이언트에 반환된다.

===================

- 커넥션 풀의 이해
* DB의 커넥션을 획득하는 과정
1) 애플리케이션 로직이 DB 드라이버를 통해 커넥션 조회
2) DB 드라이버는 DB와 TCP/IP 커넥션 연결 (3-way handshake)
3) 연결 완료 후 ID, PW와 부가 정보를 DB에 전달
4) DB는 내부 인증 후 DB 세션 생성 - 커넥션 생성 완료 응답 전송
5) DB 드라이버는 이를 받아 커넥션 객체 생성 후 클라이언트에게 반환.

==> 응답 속도에 영향을 준다. (SQL 실행 시간 + 커넥션 만드는 시간...)
-> 한 번에 해결하기 위해 <커넥션을 미리 만들어서 사용하는> 커넥션 풀을 사용하는 것!

* 커넥션 풀
- 애플리케이션 시작 때 필요한 만큼의 커넥션을 미리 확보해서 보관해둔다 (보통 10개)
- 각각의 커넥션은 TCP/IP로 DB와 커넥션이 연결되어 있어서 언제든지 SQL를 DB에 전달 가능!

* 사용 예제 1)
- DB 드라이버가 아닌, 커넥션 풀에 있는 커넥션을 객체 참조로 가져다 쓴다.
- 커넥션 풀은 커넥션 요청을 받으면 하나를 반환한다.

* 예제 2)
- 애플리케이션 로직은 커넥션 풀에서 받은 커넥션으로 SQL을 DB에 저장하고 결과를 받아서 처리한다.
- 커넥션을 모두 사용하면 종료 대신 다시 커넥션 풀에 반환해준다. (살아있는 상태로)

- 대표적인 커넥션 풀로는 commons-dbcp2, tomcat-jdbc pool, hikariCP 등이 있다!
- 스프링은 히카리가 기본임! (대부분 히카리 사용함)


=============

- 커넥션 풀을 어떻게 하면 얻을 수 있을까?
: JDBC DriverManager 사용 or 커넥션 풀 사용

1) JDBC DriverManager
- 애플리케이션 로직에서 DriverManager를 사용해서 커넥션을 획득하다가,
HikariCP 같은 커넥션 풀을 사용하도록 변경하면 커넥션을 획득하는 코드도 같이 바꿔줘야 한다...!
-> 이를 위해 자바에서 DataSource라는 인터페이스를 제공한다.
= 이는 커넥션을 획득하는 방법을 추상화하는 인터페이스!!
--> 핵심 기능이 바로 커넥션 조회 기능!

- 커넥션 풀들은 대부분 DataSource 인터페이스를 구현해두었기 때문에,
코드에서는 DataSource 인터페이스에만 의존하도록 애플리케이션 로직을 작성하면 된다.
- 그러나, DriverManager는 DataSource 인터페이스를 사용하지 않지만,
스프링에서는 DriverMangerDataSource라는 클래스를 제공해준다.


