- JDBC
: 클라이언트가 애플리케이션 서버를 통해 데이터 저장 및 조회를 할 때,

서버는 일반적으로 다음과 같은 프로세스를 진행한다.
1. TCP/IP를 사용하여 커넥션 연결
2. 애플리케이션 서버는 DB가 이해할 수 있는 SQL을 연결된 커넥션을 통해 DB에 전달
3. DB는 전달된 SQL 수행 및 결과 응답 + 서버는 응답 결과를 활용

- DB마다 다 방법이 다르니까 이를 통합하기 위해 JDBC라는 자바 표준이 등장하였다.


=======

- JDBC 표준 인터페이스
: 자바에서 DB에 접속할 수 있도록 하는 자바 API.
JDBC는 DB의 자료 쿼리 및 업데이트 방법을 제공한다.

1) 연결 - java.sql.Connection
2) SQL 담은 내용 - java.sql.Statement
3) SQL 요청 응답 - java.sql.ResultSet

- 각각의 DB는 JDBC 드라이버를 제공하여 각각의 DB에 접근할 수 있도록 한다.
(왜냐면 JDBC는 인터페이스니까, 각각을 DB에 맞춰서 구현을 해야 함)

--> 결국 개발자는 JDBC 표준 인터페이스에 맞춰서 개발을 하면 된다.
각각의 DB에 맞춰서 드라이버를 꽂아서 사용하기만 하면 되기 때문!


==============

- JDBC를 사용하는 기술 : 대표적으로 SQL Mapper / ORM 기술
SQL Mapper (JdbcTemplate / MyBatis)
: SQL 응답 결과를 객체로 변결하거나, JDBC의 반복 코드를 제거해준다.
: 그러나, SQL문 자체는 직접 작성해야 한다.

ORM 기술 (Hibernate / EclipseLink / JPA)
: 객체를 관계형 데이터베이스 테이블과 매핑해주는 기술
: 개발자가 직접 SQL을 작성할 필요 없다는 장점이 있다.


==================

- JDBC DriverManager 연결 이해
- JDBC는 java.sql.Connection이라는 표준 커넥션 인터페이스를 정의하고,
H2는 이러한 jdbc 커넥션 인터페이스의 구현체를 제공하게 된다.

- DriverManager Connection 요청 흐름
: drivermanager는 라이브러리에 등록된 db 드라이버 관리 및 커넥션 획득 기능을 제공한다.

1) 애플리케이션 로직에서 커넥션 필요 > DriverManager.getConnection() 호출
2) DriverManager는 등록된 드라이버 목록 인식 후, 커넥션 획득 가능 여부 확인
이때 URL 정보(여기에 db에 관한 직접적인 정보가 제공된다고 볼 수 있음), 접속에 필요한 정보 등을 함께 넘겨준다.
ex- URL) jdbc:h2:tcp://localhost/~...
3) 각각의 드라이버는 본인이 처리 가능한 요청인지 확인한다.
4) 찾아진 커넥션 구현체가 클라이언트에 반환된다.

===================




