* 자바의 예외
1) Object: 예외도 객체이기 때문에 최상위 부모.
2) Throwable: 최상위 예외.
3-1) Exception : 체크 예외와 언체크 예외로 나뉜다.
- 애플리케이션 로직에서 사용할 수 있는 실질적인 최상위 예외이다.
3-1-1) SQLException, IOException (체크 예외)
- 컴파일러가 체크하는 예외이다 -> 컴파일 오류가 발생
3-1-2) RuntimeException (언체크 예외)
- 컴파일러가 체크하지 않는다. 런타임 예외라고 많이 한다.

3-2) Error: 메모리 부족, 시스템 오류
- 애플리케이션 단계에서 복구 불가능하다.
- 상위 예외를 catch로 잡으면 하위까지 잡기 때문에, 보통은 Exception부터 예외로 생각하고 잡아준다.
- Error 역시 언체크 예외.

===============

* 예외의 기본 규칙
- 예외는 잡아서 처리하거나 던져야 한다.
: 처리를 못하면 호출한 것으로 예외를 계속 던지게 된다. (폭탄마냥...)
==> main() 스레드의 경우 계속 처리 못하면 예외 로그를 출력하면서 시스템을 종료한다.
==> 웹에서는 보통 WAS가 받아서 오류 페이지를 보여주는 형식

- 예외를 잡아서 던질 때 지정된 예외 + 하위 자식까지 함께 처리된다.
ex) Exception을 catch로 잡으면 하위 예외들을 모두 잡을 수 있다.
throws로 던지면 하위 예외들도 함께 던지게 된다.

==================

체크 예외
장점) 컴파일러가 실수로 예외를 누락해도 잡아준다
단점) 모든 체크 예외를 반드시 잡거나 던져야 해서 번거롭다. + 의존관계에 의한 단점

언체크 예외
장점) 신경쓰기 싫은 예외 무시 가능. 의존관계 참조할 필요 없음
단점) 실수로 예외를 누락할 수도 있다.

=====================

** 체크 예외 활용
- 기본적으로는 언체크 예외를 사용할 것.
- 체크 예외는 비즈니스 로직상 의도적으로 던지는 예외에만 사용할 것
(ex. 계좌이체 실패, id-pw 불일치... etc)

** 체크 예외가 안 좋은 점
- 서비스에서 만약 리포지토리의 SQLException, 그리고 db connection 관련 예외를 처리한다고 생각해보자.
-> 그러나, 서비스단에서 이를 처리할 방법이 없다. => 밖으로 던질 수밖에 없음
=> 컨트롤러에게 온다. 근데 컨트롤러도 처리할 수가 없음 => 던짐
=> 웹이면 서블릿의 오류 페이지나, 스프링 MVC의 ControllerAdvice에서 처리하게 된다.
-> 근데 이건 보통 사용자에게 설명하기도 어려우니 걍 일반적인 페이지 보여준다.
=> 이런 식으로 해결이 불가능한 예외는 별도의 오류 예외를 남기고, 개발자에게 오류에 대해 알려야함.

- 런타임 예외를 사용할 때는 문서화를 잘해야 한다!
- 혹은 코드에서 throws 런타임예외를 남겨서 중요한 예외를 인지할 수 있도록 하는 게 중요하다!
