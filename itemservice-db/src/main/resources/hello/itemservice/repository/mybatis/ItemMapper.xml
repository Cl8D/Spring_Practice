<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace에 매퍼 위치를 지정해준다! -->
<mapper namespace="hello.itemservice.repository.mybatis.ItemMapper">
    <!-- id : mapper interface에 설정한 메서드 이름 지정해주기 (save() 메서드) -->
    <!-- useGeneratedKeys는 키 생성 전략이 IDENTITY일 때 사용한다. -->
    <!-- keyProperty는 생성되는 키의 속성 이름을 지정해준다. (insert 후 item 객체의 id 속성에 생성된 값이 입력된다) -->
    <insert id="save" useGeneratedKeys="true" keyProperty="id">
        insert into item (item_name, price, quantity)
        <!-- 파라미터는 #{} 문법을 사용해준다. 매퍼에서 넘긴 객체의 프로퍼티 이름을 적어준다. -->
        <!-- 이때 PreparedStatement를 사용하기 때문에 JDBC에서 ?를 치환하는 것과 같은 느낌!  -->
        values (#{itemName}, #{price}, #{quantity})
    </insert>

    <update id="update">
        update item
        set item_name=#{updateParam.itemName},
            price=#{updateParam.price},
            quantity=#{updateParam.quantity}
        where id = #{id}
    </update>

    <!-- resultType으로 반환 타입을 명시해준다. 여기서는 Item 객체에 매핑된다. -->
    <!-- 반환 객체가 여러 개이면 List를 사용해주면 된다! -->
    <select id="findById" resultType="Item">
        select id, item_name, price, quantity
        from item
        where id = #{id}
    </select>

    <select id="findAll" resultType="Item">
        select id, item_name, price, quantity
        from item
        <where>
        <!-- 동적 쿼리를 작성해준다. -->
            <if test="itemName != null and itemName != ''">
                and item_name like concat('%',#{itemName},'%')
            </if>
            <if test="maxPrice != null">
            <!-- 가격을 비교할 때 <는 &lt, >는 &gt, &는 &amp로 사용한다 -->
                and price &lt;= #{maxPrice}
            </if>
        </where>
    </select>

</mapper>