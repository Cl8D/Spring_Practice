save()
-> 새로운 엔티티면 저장 (persist)
-> 아니면 병합 (merge)

<새로운 엔티티 판단하는 전략>
1) 식별자 객체 -> null
2) 식별자가 자바의 기본 타입(ex. long) -> 0으로 판단
3) Persistable 인터페이스 구현을 통한 판단 로직 변경 가능.

=========

식별자의 생성 전략이 @GenerateValue면
save() 호출 시점에 식별자가 없기 때문에,
(얘는 em.persist()하는 순간에 값이 들어가는 거여서)
새로운 엔티티라고 생각하고 정상적으로 동작한다.

그러나, 만약 @Id만 사용하고 개발자가 직접 pk를 할당하는 형태라면
이미 식별자가 있는 상태에서 save()를 호출하게 된다.
그러면 이때는 새로운 엔티티라고 판단하지 못하기 때문에
merge()가 호출되고,
merge()는 db를 호출하여 값을 확인한 다음에 -> select 쿼리 나감
db에 값이 없음을 확인하고 새로운 엔티티라고 생각해서 비효율적이게 된다.

그래서, Persistable 인터페이스를 통해서 새로운 엔티티를 확인하도록 직접 구현하는 게 낫다.
(등록 시간 @CreatedDate를 활용하여 얘가 값이 없으면 새로운 엔티티로 판단한다든지, 그런 전략을 사용할 수 잇음)
