우리가 원하는 기능은 어떻게 만들 수 있을까?
ex) findUsername(String username)
-> 이런 것도 spring Data JPA가 알아서 처리해준다.

<쿼리 메소드>
1) 메소드 이름으로 쿼리를 생성해주는 기능
: 메소드 이름을 분석하여 JPQL 쿼리를 실행해준다,
2) 메소드 이름으로 JPA NamedQuery 호출
: 엔티티에 @NamedQuery 붙여서 쓰는 느낌
3) @Query 어노테이션을 통해 리파지토리 인터페이스에 쿼리 직접 정의하기

---

<1. 쿼리 메서드 기능>
조회)
find...By
read...By
query...By
get...By
====> ...에 식별하기 위한 내용(설명) 같이 아무거나 들어가도 된다. 어차피 by = where절이 중요한 느낌임!

카운트)
count...By
-> 반환: long

존재 여부)
exists...By
-> 반환: boolean

삭제)
delete...By
remove...By
-> 반환: long

distinct)
findDistinct
findMemberDistinctBy

limit)
findFirst3 -> limit=3으로 상위 3개 뽑아올 수 있음!
findFirst
findTop
findTop3

참고로, 엔티티 필드명 변경 시 인터페이스에 정의한 메서드 이름도 꼭 바꿔야 함!
-> 아니면 애플리케이션 시작 시점에 오류가 발생함.
이런 식으로 로딩 시점에 오류 인지가 가능한 게 큰 장점!

https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation
여기서 필요한 거 봐주면 될 것 같음.

---

<2. @NamedQuery>
= JPA 활용해서 직접 호출하기
@Entity
@NamedQuery(
 name="Member.findByUsername",
 query="select m from Member m where m.username = :username")
public class Member { ... }
==> 이런 식으로 이름이랑 query를 부여할 수 있음.

사용)
public class MemberRepository {
 public List<Member> findByUsername(String username) {
 ...
 List<Member> resultList =
    em.createNamedQuery("Member.findByUsername", Member.class)
            .setParameter("username", username)
            .getResultList();
 }
}
==> 이렇게 createNamedQuery를 활용하여 name을 통해 지정했던 query를 호출할 수 있음!


= Spring Data JPA를 활용하여 namedQuery 사용하기
@Query(name = "Member.findByUsername")
List<Member> findByUsername(@Param("username") String username);
: 물론 이런 식으로 query를 생략해도 메서드 이름으로도 제어할 수 있다.

사용)
public interface MemberRepository extends JpaRepository<Member, Long> { //** 여기 선언한 Member 도메인 클래스
    List<Member> findByUsername(@Param("username") String username);
}
: 선언한 도메인 클래스(Member) + . + 메서드 이름 (findByUsername)으로
Named Query를 찾아서 실행해준다. -> 실행할 쿼리가 없으면 메서드 이름을 통해 알아서 쿼리 만들어줌.

---

<3. @Query>
실행할 메서드에 정적 쿼리를 직접 작성하는 방법!
public interface MemberRepository extends JpaRepository<Member, Long> {
    @Query("select m from Member m where m.username= :username and m.age = :age")
    List<Member> findUser(@Param("username") String username, @Param("age") int age);
}
=> 마찬가지로 애플리케이션 실행 시점에 문법 오류 발견 가능!
==> 메서드 이름에 의존해서 query를 생성하도록 하면 메서드 이름이 너무 길어지니까,
여러 조건을 붙일 땐 그냥 @Query를 활용하여 쿼리를 직접 써주는 형태를 많이 사용한다고 한다.

---

<<반환 타입>
컬렉션
-> 결과 없음: 빈 컬렉션 반환
==> null이 아니라는 점!! null 조건을 둘 필요가 없음.

단건 조회
-> 결과 없음: null 반환
(원래 기존의 .getSingleResult()는 NoResultException이 터지지만, spring data jpa가 이를 무시해버리는 것)
-> 결과가 2건 이상: javax.persistence.NonUniqueResultException 예외 발생

